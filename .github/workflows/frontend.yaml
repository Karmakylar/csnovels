# This is a basic workflow to help you get started with Actions

name: frontend-build-deploy

# Controls when the workflow will run
on:
  push:
    branches:
      - main

  # Enabled build manually
  workflow_dispatch:

concurrency: ${{ github.repository }}_${{ github.workflow }}

# ${{ env.<ENV> }}
env:
  CURRENT_ENV: dev
  ECR_REPOSITORY: csnovel_frontend #
  IMAGE_TAG_LATEST: latest
  AWS_REGION: us-east-1
  #
  ECS_CONTAINER: frontend-container
  ECS_SERVICE: frontend_svc
  ECS_CLUSTER: csnovel-ecs

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    name: Build Docker 
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        timeout-minutes: 15 #####
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-8)
          docker build \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
          
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE_TAG" $ECR_REGISTRY $ECR_REPOSITORY $IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition frontend_taskdef --region ${{ env.AWS_REGION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        with:
          task-definition: task-definition.json #frontend_taskdef
          container-name: ${{ env.ECS_CONTAINER }} 
          image: ${{ steps.build-image.outputs.image }} 

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
